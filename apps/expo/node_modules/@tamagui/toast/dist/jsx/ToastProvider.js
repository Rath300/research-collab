import { createCollection } from "@tamagui/collection";
import { createStyledContext } from "@tamagui/core";
import * as React from "react";
import { TOAST_CONTEXT } from "./constants";
import { ToastImperativeProvider } from "./ToastImperative";
const PROVIDER_NAME = "ToastProvider", [Collection, useCollection] = createCollection("Toast"), { Provider: ToastProviderProvider, useStyledContext: useToastProviderContext } = createStyledContext(), ToastProvider = (props) => {
  const {
    __scopeToast,
    id: providedId,
    burntOptions,
    native,
    notificationOptions,
    label = "Notification",
    duration = 5e3,
    swipeDirection = "right",
    swipeThreshold = 50,
    children
  } = props, id = providedId ?? React.useId(), [viewports, setViewports] = React.useState({}), [toastCount, setToastCount] = React.useState(0), isFocusedToastEscapeKeyDownRef = React.useRef(!1), isClosePausedRef = React.useRef(!1), handleViewportChange = React.useCallback(
    (name, viewport) => {
      setViewports((prev) => ({ ...prev, [name]: viewport }));
    },
    []
  ), options = React.useMemo(() => ({
    duration,
    burntOptions,
    native,
    notificationOptions
  }), [JSON.stringify([duration, burntOptions, native, notificationOptions])]);
  return <Collection.Provider __scopeCollection={__scopeToast || TOAST_CONTEXT}><ToastProviderProvider
    scope={__scopeToast}
    id={id}
    label={label}
    duration={duration}
    swipeDirection={swipeDirection}
    swipeThreshold={swipeThreshold}
    toastCount={toastCount}
    viewports={viewports}
    onViewportChange={handleViewportChange}
    onToastAdd={React.useCallback(() => {
      setToastCount((prevCount) => prevCount + 1);
    }, [])}
    onToastRemove={React.useCallback(() => {
      setToastCount((prevCount) => prevCount - 1);
    }, [])}
    isFocusedToastEscapeKeyDownRef={isFocusedToastEscapeKeyDownRef}
    isClosePausedRef={isClosePausedRef}
  ><ToastImperativeProvider options={options}>{children}</ToastImperativeProvider></ToastProviderProvider></Collection.Provider>;
};
ToastProvider.propTypes = {
  label(props) {
    if (props.label && typeof props.label == "string" && !props.label.trim()) {
      const error = `Invalid prop \`label\` supplied to \`${PROVIDER_NAME}\`. Expected non-empty \`string\`.`;
      return new Error(error);
    }
    return null;
  }
};
ToastProvider.displayName = PROVIDER_NAME;
export {
  Collection,
  ToastProvider,
  useCollection,
  useToastProviderContext
};
//# sourceMappingURL=ToastProvider.js.map
