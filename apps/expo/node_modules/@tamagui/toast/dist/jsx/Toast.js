import {
  composeEventHandlers,
  styled,
  themeable,
  useEvent,
  withStaticProperties
} from "@tamagui/core";
import { ThemeableStack } from "@tamagui/stacks";
import { SizableText } from "@tamagui/text";
import { useControllableState } from "@tamagui/use-controllable-state";
import * as React from "react";
import { TOAST_NAME } from "./constants";
import { ToastAnnounceExclude } from "./ToastAnnounce";
import {
  useToast,
  useToastController,
  useToastState
} from "./ToastImperative";
import {
  ToastImpl,
  ToastImplFrame,
  useToastInteractiveContext
} from "./ToastImpl";
import { ToastProvider } from "./ToastProvider";
import { ToastViewport } from "./ToastViewport";
const TITLE_NAME = "ToastTitle", ToastTitle = styled(SizableText, {
  name: TITLE_NAME,
  variants: {
    unstyled: {
      false: {
        color: "$color",
        size: "$4"
      }
    }
  },
  defaultVariants: {
    unstyled: !1
  }
});
ToastTitle.displayName = TITLE_NAME;
const DESCRIPTION_NAME = "ToastDescription", ToastDescription = styled(SizableText, {
  name: DESCRIPTION_NAME,
  variants: {
    unstyled: {
      false: {
        color: "$color11",
        size: "$1"
      }
    }
  },
  defaultVariants: {
    unstyled: !1
  }
});
ToastDescription.displayName = DESCRIPTION_NAME;
const ACTION_NAME = "ToastAction", ToastAction = React.forwardRef(
  (props, forwardedRef) => {
    const { altText, ...actionProps } = props;
    return altText ? <ToastAnnounceExclude altText={altText} asChild><ToastClose {...actionProps} ref={forwardedRef} /></ToastAnnounceExclude> : null;
  }
);
ToastAction.propTypes = {
  altText(props) {
    return props.altText ? null : new Error(`Missing prop \`altText\` expected on \`${ACTION_NAME}\``);
  }
};
ToastAction.displayName = ACTION_NAME;
const CLOSE_NAME = "ToastClose", ToastCloseFrame = styled(ThemeableStack, {
  name: CLOSE_NAME,
  tag: "button"
}), ToastClose = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeToast, ...closeProps } = props, interactiveContext = useToastInteractiveContext(__scopeToast);
    return <ToastAnnounceExclude asChild><ToastCloseFrame
      accessibilityLabel="Dialog Close"
      {...closeProps}
      ref={forwardedRef}
      onPress={composeEventHandlers(props.onPress, interactiveContext.onClose)}
    /></ToastAnnounceExclude>;
  }
);
ToastClose.displayName = CLOSE_NAME;
const ToastComponent = React.forwardRef(
  ToastImplFrame.extractable((props, forwardedRef) => {
    const { forceMount, open: openProp, defaultOpen, onOpenChange, ...toastProps } = props, [open, setOpen] = useControllableState({
      prop: openProp,
      defaultProp: defaultOpen ?? !0,
      onChange: onOpenChange,
      strategy: "most-recent-wins"
    }), id = React.useId(), onPause = useEvent(props.onPause), onResume = useEvent(props.onResume);
    return forceMount || open ? <ToastImpl
      id={id}
      open={open}
      {...toastProps}
      ref={forwardedRef}
      onClose={() => setOpen(!1)}
      onPause={onPause}
      onResume={onResume}
      onSwipeEnd={composeEventHandlers(props.onSwipeEnd, (event) => {
        setOpen(!1);
      })}
    /> : null;
  })
);
ToastComponent.displayName = TOAST_NAME;
const Toast = withStaticProperties(
  themeable(ToastComponent, ToastImplFrame.staticConfig),
  {
    Title: ToastTitle,
    Description: ToastDescription,
    Action: ToastAction,
    Close: ToastClose
  }
);
export {
  Toast,
  ToastProvider,
  ToastViewport,
  useToast,
  useToastController,
  useToastState
};
//# sourceMappingURL=Toast.js.map
