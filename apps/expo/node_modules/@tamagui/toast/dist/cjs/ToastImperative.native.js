"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf, __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: !0 }) : target,
  mod
)), __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var ToastImperative_exports = {};
__export(ToastImperative_exports, {
  ToastImperativeProvider: () => ToastImperativeProvider,
  useToast: () => useToast,
  useToastController: () => useToastController,
  useToastState: () => useToastState
});
module.exports = __toCommonJS(ToastImperative_exports);
var import_core = require("@tamagui/core"), import_react = __toESM(require("react")), import_react_native = require("react-native"), import_createNativeToast = require("./createNativeToast"), import_jsx_runtime = require("react/jsx-runtime");
const ToastContext = (0, import_react.createContext)({}), ToastCurrentContext = (0, import_react.createContext)(null), useToastController = () => (0, import_react.useContext)(ToastContext), useToastState = () => (0, import_react.useContext)(ToastCurrentContext), useToast = () => ({
  ...useToastController(),
  currentToast: useToastState()
}), ToastImperativeProvider = ({
  children,
  options
}) => {
  const counterRef = (0, import_react.useRef)(0), [toast, setToast] = import_react.default.useState(null), [lastNativeToastRef, setLastNativeToastRef] = import_react.default.useState(null), show = import_react.default.useCallback(
    (title, showOptions) => {
      const native = (showOptions == null ? void 0 : showOptions.native) ?? options.native, isWebNative = Array.isArray(native) ? native.includes("web") : native === "web", isMobileNative = Array.isArray(native) ? native.includes("mobile") : native === "mobile", isAndroidNative = isMobileNative || (Array.isArray(native) ? native.includes("android") : native === "android"), isIosNative = isMobileNative || (Array.isArray(native) ? native.includes("ios") : native === "ios"), isHandledNatively = native === !0 || import_core.isWeb && isWebNative || !import_core.isWeb && isMobileNative || import_react_native.Platform.OS === "android" && isAndroidNative || import_react_native.Platform.OS === "ios" && isIosNative;
      if (isHandledNatively) {
        const nativeToastResult = (0, import_createNativeToast.createNativeToast)(title, showOptions ?? {});
        typeof nativeToastResult == "object" && nativeToastResult.nativeToastRef && setLastNativeToastRef(nativeToastResult.nativeToastRef);
      }
      return counterRef.current++, setToast({
        ...showOptions == null ? void 0 : showOptions.customData,
        ...showOptions,
        viewportName: (showOptions == null ? void 0 : showOptions.viewportName) ?? "default",
        title,
        id: counterRef.current.toString(),
        isHandledNatively
      }), !0;
    },
    [setToast, options.native]
  ), hide = import_react.default.useCallback(() => {
    lastNativeToastRef == null || lastNativeToastRef.close(), setToast(null);
  }, [setToast, lastNativeToastRef]), contextValue = (0, import_react.useMemo)(() => ({
    show,
    hide,
    nativeToast: lastNativeToastRef,
    options
  }), [show, hide, lastNativeToastRef, JSON.stringify(options || null)]);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ToastContext.Provider, { value: contextValue, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(ToastCurrentContext.Provider, { value: toast, children }) });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ToastImperativeProvider,
  useToast,
  useToastController,
  useToastState
});
//# sourceMappingURL=ToastImperative.js.map
